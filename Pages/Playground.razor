@page "/"
@using Liquido.Services
@inject ClientLiquidRenderService RenderService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Liquid JSON Playground</PageTitle>

<div class="playground-container">
    <div class="editor-panel">
        <div class="panel-header @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">
            <h3>JSON Data</h3>
            <select @bind="Theme" class="theme-selector">
                <option value="vs-dark">Dark</option>
                <option value="vs-light">Light</option>
            </select>
        </div>
        @if (_monacoLoaded)
        {
            <div class="editor-container">
                <StandaloneCodeEditor @ref="_jsonEditor"
                                     Id="json-editor"
                                     ConstructionOptions="JsonEditorOptions"
                                     CssClass="editor-monaco"
                                     OnDidInit="OnJsonEditorInit"
                                     OnDidChangeModelContent="OnJsonChanged" />
            </div>
        }
    </div>

    <div class="editor-panel">
        <div class="panel-header @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">
            <h3>Liquid Template</h3>
            <select @bind="SelectedExample" class="example-selector">
                <option value="">Examples</option>
                <option value="simple">Simple User</option>
                <option value="array">Property List</option>
                <option value="sql">SQL Insert</option>
                <option value="csharp">C# Class Generator</option>
                <option value="html">HTML Table</option>
                <option value="xml">XML Document</option>
            </select>
        </div>
        @if (_monacoLoaded)
        {
            <div class="editor-container">
                <StandaloneCodeEditor @ref="_liquidEditor"
                                     Id="liquid-editor"
                                     ConstructionOptions="LiquidEditorOptions"
                                     CssClass="editor-monaco"
                                     OnDidInit="OnLiquidEditorInit"
                                     OnDidChangeModelContent="OnLiquidChanged" />
            </div>
        }
    </div>

    <div class="preview-panel">
        <div class="panel-header @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">
            <h3>Preview</h3>
            <select @bind="SelectedLanguage" class="language-selector">
                <option value="plaintext">Plain Text</option>
                <option value="csharp">C#</option>
                <option value="sql">SQL</option>
                <option value="html">HTML</option>
                <option value="xml">XML</option>
            </select>
            <button @onclick="CopyToClipboard" class="copy-button" disabled="@(!_previewEditorReady || _isRendering || !string.IsNullOrEmpty(_error))" title="Copy to clipboard">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                    <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                </svg>
                @if (_copied)
                {
                    <span class="copied-text">Copied!</span>
                }
            </button>
        </div>
        @if (!_monacoLoaded)
        {
            <div class="loading @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">Loading Monaco Editor...</div>
        }
        else if (_isRendering)
        {
            <div class="loading @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">Rendering...</div>
        }
        else if (!string.IsNullOrEmpty(_error))
        {
            <div class="error @(_theme == "vs-dark" ? "dark-theme" : "light-theme")">@_error</div>
        }

        @if (_monacoLoaded)
        {
            <div class="@(_isRendering || !string.IsNullOrEmpty(_error) ? "editor-hidden" : "editor-visible")">
                <StandaloneCodeEditor @ref="_previewEditor"
                                      Id="preview-editor"
                                      ConstructionOptions="PreviewEditorOptions"
                                      CssClass="editor-monaco"
                                      OnDidInit="OnPreviewEditorInit" />
            </div>
        }
    </div>
</div>

<style>
</style>

@code {
    private StandaloneCodeEditor? _jsonEditor;
    private StandaloneCodeEditor? _liquidEditor;
    private StandaloneCodeEditor? _previewEditor;
    private string _selectedLanguage = "plaintext";
    private string _selectedExample = "";
    private bool _isRendering = false;
    private string? _error;
    private System.Timers.Timer? _debounceTimer;
    private bool _jsonEditorReady = false;
    private bool _liquidEditorReady = false;
    private bool _previewEditorReady = false;
    private bool _monacoLoaded = false;
    private bool _copied = false;
    private System.Threading.CancellationTokenSource? _copiedCts;
    private string _theme = "vs-dark";

    private string SelectedLanguage
    {
        get => _selectedLanguage;
      set
      {
         _selectedLanguage = value;
            _ = UpdatePreviewLanguageAsync();
        }
    }

    private string SelectedExample
    {
        get => _selectedExample;
        set
        {
  _selectedExample = value;
    _ = LoadExampleAsync(value);
        }
    }

    private string Theme
    {
        get => _theme;
        set
        {
            _theme = value;
            _ = UpdateThemeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
   if (firstRender)
    {
        // Load theme from localStorage
       try
            {
   var savedTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "liquido-theme");
                if (!string.IsNullOrEmpty(savedTheme))
        {
     _theme = savedTheme;
             }
            }
       catch
       {
    // If localStorage fails, use default theme
        }

  // Wait for Monaco to be fully loaded
            await Task.Delay(1000);
  _monacoLoaded = true;
         StateHasChanged();
        }
    }

    private async Task LoadExampleAsync(string exampleId)
    {
        if (string.IsNullOrEmpty(exampleId) || _jsonEditor == null || _liquidEditor == null)
            return;

        var (json, liquid, language) = GetExampleContent(exampleId);

        await _jsonEditor.SetValue(json);
        await _liquidEditor.SetValue(liquid);

        // Update preview language if example specifies one
        if (!string.IsNullOrEmpty(language))
        {
            _selectedLanguage = language;
            await UpdatePreviewLanguageAsync();
        }

        // Trigger a render
        await RenderTemplateAsync();
    }

    private (string json, string liquid, string language) GetExampleContent(string exampleId)
    {
        return exampleId switch
        {
            "simple" => (
 @"{
  ""firstName"": ""John"",
  ""lastName"": ""Doe"",
  ""email"": ""john.doe@example.com"",
  ""age"": 30
}",
       @"<user>
  <name>{{ firstName }} {{ lastName }}</name>
  <email>{{ email }}</email>
  <age>{{ age }}</age>
</user>",
     "xml"
            ),

            "array" => (
              @"[
  { ""type"": ""string"", ""name"": ""FirstName"" },
  { ""type"": ""string"", ""name"": ""LastName"" },
  { ""type"": ""int"", ""name"": ""Age"" },
  { ""type"": ""bool"", ""name"": ""IsActive"" }
]",
             @"public class Person
{
{%- for prop in model %}
    public {{ prop.type }} {{ prop.name }} { get; set; }
{% endfor %}
}",
                 "csharp"
                    ),

            "sql" => (
 @"[
  {
    ""table"": ""Users"",
    ""columns"": [""Id"", ""Name"", ""Email""],
    ""values"": [1, ""John Doe"", ""john@example.com""]
  },
  {
    ""table"": ""Users"",
    ""columns"": [""Id"", ""Name"", ""Email""],
    ""values"": [2, ""Jane Smith"", ""jane@example.com""]
  }
]",
    @"{% for row in model %}INSERT INTO {{ row.table }} ({{ row.columns | join: ', ' }})
VALUES ({{ row.values | join: ', ' }});
{% endfor %}",
    "sql"
            ),

            "csharp" => (
   @"{
  ""namespace"": ""MyApp.Models"",
  ""className"": ""Product"",
  ""properties"": [
    { ""name"": ""Id"", ""type"": ""int"" },
    { ""name"": ""Name"", ""type"": ""string"" },
    { ""name"": ""Price"", ""type"": ""decimal"" },
    { ""name"": ""InStock"", ""type"": ""bool"" }
  ]
}",
          @"namespace {{ namespace }}
{
    public class {{ className }}
    {
{%- for prop in properties %}
        public {{ prop.type }} {{ prop.name }} { get; set; }
{% endfor %}
    }
}",
          "csharp"
            ),

            "html" => (
     @"{
  ""title"": ""User List"",
  ""users"": [
 { ""id"": 1, ""name"": ""John Doe"", ""email"": ""john@example.com"" },
    { ""id"": 2, ""name"": ""Jane Smith"", ""email"": ""jane@example.com"" },
    { ""id"": 3, ""name"": ""Bob Johnson"", ""email"": ""bob@example.com"" }
  ]
}",
         @"<h1>{{ title }}</h1>
<table>
  <thead>
  <tr>
  <th>ID</th>
      <th>Name</th>
      <th>Email</th>
    </tr>
  </thead>
  <tbody>
{%- for user in users %}
    <tr>
      <td>{{ user.id }}</td>
      <td>{{ user.name }}</td>
      <td>{{ user.email }}</td>
    </tr>
{% endfor %}
  </tbody>
</table>",
 "html"
   ),

            "xml" => (
             @"{
  ""company"": ""Tech Corp"",
  ""employees"": [
    {
      ""id"": 1,
      ""name"": ""Alice Johnson"",
  ""position"": ""Developer"",
      ""salary"": 75000
    },
    {
      ""id"": 2,
      ""name"": ""Bob Smith"",
      ""position"": ""Manager"",
      ""salary"": 85000
    }
  ]
}",
           @"<company name=""{{ company }}"">
  <employees>
{%- for employee in employees %}
    <employee id=""{{ employee.id }}"">
      <name>{{ employee.name }}</name>
      <position>{{ employee.position }}</position>
      <salary>{{ employee.salary }}</salary>
    </employee>{% endfor %}
  </employees>
</company>",
             "xml"
        ),

            _ => ("", "", "")
        };
    }

    private StandaloneEditorConstructionOptions JsonEditorOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
   Language = "json",
      Theme = _theme,
   Value = @"{
  ""firstName"": ""John"",
  ""lastName"": ""Doe""
}",
 AutomaticLayout = true,
      Minimap = new EditorMinimapOptions { Enabled = false },
  ScrollBeyondLastLine = false
        };
    }

    private StandaloneEditorConstructionOptions LiquidEditorOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "liquid",
   Theme = _theme,
      Value = @"Hello, {{ firstName }} {{ lastName }}!",
  AutomaticLayout = true,
    Minimap = new EditorMinimapOptions { Enabled = false },
     ScrollBeyondLastLine = false
      };
    }

    private StandaloneEditorConstructionOptions PreviewEditorOptions(StandaloneCodeEditor editor)
    {
     return new StandaloneEditorConstructionOptions
     {
   Language = _selectedLanguage,
      Theme = _theme,
            Value = "",
    ReadOnly = true,
    AutomaticLayout = true,
       Minimap = new EditorMinimapOptions { Enabled = false },
 ScrollBeyondLastLine = false
        };
    }

    private async Task OnJsonEditorInit()
    {
        _jsonEditorReady = true;
        await TryInitialRender();
    }

    private async Task OnLiquidEditorInit()
    {
        _liquidEditorReady = true;
        await TryInitialRender();
    }

    private async Task OnPreviewEditorInit()
    {
        _previewEditorReady = true;
        await TryInitialRender();
    }

    private async Task TryInitialRender()
    {
        // Only render once all editors are ready
        if (_jsonEditorReady && _liquidEditorReady && _previewEditorReady)
        {
            await RenderTemplateAsync();
        }
    }

    private void OnJsonChanged(ModelContentChangedEvent e)
    {
        OnEditorContentChanged();
    }

    private void OnLiquidChanged(ModelContentChangedEvent e)
    {
        OnEditorContentChanged();
    }

    private void OnEditorContentChanged()
    {
        _debounceTimer?.Stop();
        _debounceTimer?.Dispose();
        _debounceTimer = new System.Timers.Timer(500); // 500ms debounce
        _debounceTimer.Elapsed += async (sender, e) =>
        {
            _debounceTimer?.Stop();
            await InvokeAsync(async () =>
             {
                 await RenderTemplateAsync();
                 StateHasChanged();
             });
        };
        _debounceTimer.AutoReset = false;
        _debounceTimer.Start();
    }

    private async Task RenderTemplateAsync()
    {
        if (_jsonEditor == null || _liquidEditor == null || _previewEditor == null)
            return;

        try
        {
            _isRendering = true;
            _error = null;
            StateHasChanged();

            var jsonData = await _jsonEditor.GetValue();
            var liquidTemplate = await _liquidEditor.GetValue();

            // Call client-side rendering service
            var (success, result, error) = await RenderService.RenderAsync(jsonData, liquidTemplate);

            if (success && result != null)
            {
                await _previewEditor.SetValue(result);
                _error = null;
            }
            else
            {
                _error = error ?? "Unknown error";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error: {ex.Message}";
        }
        finally
        {
            _isRendering = false;
            StateHasChanged();
        }
    }

    private async Task UpdatePreviewLanguageAsync()
    {
        if (_previewEditor != null && _previewEditorReady)
        {
            try
            {
                var currentValue = await _previewEditor.GetValue();
                await _previewEditor.UpdateOptions(new EditorUpdateOptions
                {
                    Theme = _theme
                });

                // Update the model language
                var model = await _previewEditor.GetModel();
                if (model != null)
                {
                    await Global.SetModelLanguage(JSRuntime, model, _selectedLanguage);
                }
            }
            catch (Exception ex)
            {
                // Ignore errors during language update
                Console.WriteLine($"Error updating preview language: {ex.Message}");
            }
        }
    }

    private async Task CopyToClipboard()
    {
        if (_previewEditor == null || !_previewEditorReady)
            return;

        try
        {
            var content = await _previewEditor.GetValue();

            if (!string.IsNullOrEmpty(content))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);

                // Show "Copied!" feedback for 2 seconds
                _copiedCts?.Cancel();
                _copiedCts = new System.Threading.CancellationTokenSource();
                _copied = true;
                StateHasChanged();

                try
                {
                    await Task.Delay(2000, _copiedCts.Token);
                    _copied = false;
                    StateHasChanged();
                }
                catch (TaskCanceledException)
                {
                    // Expected when user copies again before timer completes
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying to clipboard: {ex.Message}");
            // Could show an error message to the user here
        }
    }

    private async Task UpdateThemeAsync(string theme)
    {
        // Save to localStorage
        try
    {
 await JSRuntime.InvokeVoidAsync("localStorage.setItem", "liquido-theme", theme);
        }
        catch
        {
    // Ignore localStorage errors
        }

        // Update all editors
   if (_jsonEditor != null && _jsonEditorReady)
        {
            await _jsonEditor.UpdateOptions(new EditorUpdateOptions { Theme = theme });
        }

        if (_liquidEditor != null && _liquidEditorReady)
        {
            await _liquidEditor.UpdateOptions(new EditorUpdateOptions { Theme = theme });
        }

        if (_previewEditor != null && _previewEditorReady)
        {
            await _previewEditor.UpdateOptions(new EditorUpdateOptions { Theme = theme });
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _debounceTimer?.Dispose();
        _copiedCts?.Cancel();
        _copiedCts?.Dispose();
    }
}
